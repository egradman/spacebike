class Game {
	Ship ship;
	InputController controller = new InPlayController();
	AsteroidFactory asteroidFactory = new AsteroidFactory();
	DisplayList displayList = new DisplayList();
	private int score = 0;
	int roids = 2;
	int ships = 3;
	int level = 0;
	int timeOnLevel = 0;
	int levelFrameStart;
	boolean waiting = false;
	EnemyShip enemy = null;
	int nextEnemy = 0;
		
	void init(boolean home) {
	    if (home) {
			println("Home Screen");
	    	controller = new NewGameController();
			addObject(new HomeScreen());
			for (int i = 0 ; i < 6 ; i++)
				addObject(asteroidFactory.createLargeEx(null));
			return;
	    }

		// Real game
		addObject(new ScoreBoard());

	    // Create the ship (always first object)
	    ship = new Ship(width/2, height/2);
	    addObject(ship);
	    
	    newLevel();
	}
	
	void startNewLevel(ListIterator it) {
		waiting = false;
		
		println("Starting level " + level + " with " + roids + " asteroids.");			
		// Add asteroids
		for (int i = 0 ; i < roids ; i++)
			it.add(asteroidFactory.createLargeEx(null));
	}
	
	void newLevel() {
		waiting = true;
		level++;
		roids = min(roids + 2, 11);
		timeOnLevel = 0;
		levelFrameStart = frameCount;
		println("Next Level : " + level);
		
		// Wait one second before starting the level.
		addObject(new NewGame());
	}
	
	void addObject(DisplayObject o) {
		displayList.add(o);
	}
	
	void shipDied() {
		ships--;
		println("Ship died, you have " + ships + " left!");
	}
	
	void gameOver(ListIterator it) {
		println("Game over!");
		controller = new GameOverController();
		it.add(new GameOver());
	}
	
	int getScore() {
		return score;
	}

	int addPoints(int points) {
		if (ships > 0)
			score += points;
		return score;
	}
	
	void newShip(ListIterator it) {
		if (ships == 0) {
			gameOver(it);
			return;
		}
		
	    ship = new Ship(width/2, height/2);
	    it.add(ship);
	}
	
	// Game Loop
	void draw() {
		int last = timeOnLevel;
		timeOnLevel = (int)((frameCount - levelFrameStart) / frameRate);
		if (timeOnLevel != last) {
			//println("Time on level: " + timeOnLevel + " seconds.");
			//println("" + (frameCount - levelFrameStart) + ", " +  (frameRate * 3));
		}

		// We add our first ship after 30 seconds for levels 1-2, 20 for 3-5
		// then 10 for all those after that.
		if (enemy == null && timeOnLevel > ((level < 3) ? 20 : ((level < 6) ? 15 : 10)) ) {
			if (nextEnemy == 0) {
<<<<<<< .mine
				nextEnemy = frameCount + (int)(random(10, 20) * frameRate);
=======
				nextEnemy = (int)(frameCount + (int)random(10, 20) * frameRate);
>>>>>>> .r15
				println("Next enemy at " + nextEnemy);
			}
			else if (frameCount >= nextEnemy) {
				println("Adding enemy ship");
				nextEnemy = 0;
				// <= 10K always show big ship, above randomly choose
				enemy = new EnemyShip(score > 10000 ? (int)random(0, 10) % 2 == 1 : true);
				addObject(enemy);
			}
		}
			
		// Check for keyboard action then update the display list.
	    controller.checkKeyboard();
	    displayList.update();
		displayList.hitTest();

		// Draw
	    background(0);
	    Iterator it = displayList.iterator();
	    int asteroids = 0;
	    
	    while (it.hasNext()) {
	    	DisplayObject fo = (DisplayObject)it.next();
	    	if (fo instanceof Asteroid)
	    		asteroids++;
	    	
	    	pushMatrix();
	    	fo.draw();
	    	popMatrix();
	    }
	    
	    if (asteroids == 0 && enemy == null && !waiting)
	    	newLevel();
	}
}
